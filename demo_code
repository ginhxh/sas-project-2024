#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>
#include <unistd.h>

#define MAX_USERS 200
#define MAX_RECLAMATIONS 200

typedef struct {
    char name[30];
    char mot_pass[40];
    char role[20];
} user;

typedef struct {
    int id;
    char motif[40];
    char description[250];
    char categorie[30];
    char status[30];
    char priority[30];
    char client[40];
    time_t date;
    char internal_notes[250];
    int user_index;
} reclamation;

int user_count = 0;
int reclamation_count = 0;

int generate_id(reclamation r[]) {
    int id;
    int exists;
    do {
        exists = 0;
        id = rand() % 200;
        for (int i = 0; i < reclamation_count; i++) {
            if (r[i].id == id) {
                exists = 1;
                break;
            }
        }
    } while (exists);
    return id;
}

void enter_rec(reclamation r[], user u[], int user_index) {
    if (reclamation_count >= MAX_RECLAMATIONS) {
        printf("Limite de reclamation atteinte.\n");
        return;
    }

    r[reclamation_count].user_index = user_index;
    r[reclamation_count].id = generate_id(r);
    r[reclamation_count].date = time(NULL);
    printf("Motif de la reclamation : ");
    scanf(" %[^\n]", r[reclamation_count].motif);
    printf("Description : ");
    scanf(" %[^\n]", r[reclamation_count].description);
    printf("Categorie : ");
    scanf(" %[^\n]", r[reclamation_count].categorie);

    if (strstr(r[reclamation_count].description, "urgent") || strstr(r[reclamation_count].description, "crash")) {
        strcpy(r[reclamation_count].priority, "Haute");
    } else if (strstr(r[reclamation_count].description, "feature") || strstr(r[reclamation_count].description, "improvement")) {
        strcpy(r[reclamation_count].priority, "Moyenne");
    } else {
        strcpy(r[reclamation_count].priority, "Basse");
    }

    strcpy(r[reclamation_count].status, "En attente");
    r[reclamation_count].internal_notes[0] = '\0';
    printf("Reclamation enregistree avec ID: %d\n", r[reclamation_count].id);
    reclamation_count++;
}

void display_reclamations(reclamation r[], user u[], char role[]) {
    if (reclamation_count == 0) {
        printf("Aucune reclamation a afficher.\n");
        return;
    }

    for (int i = 0; i < reclamation_count; i++) {
        printf("ID : %d\nClient : %s\nDate : %sMotif : %s\nDescription : %s\nCategorie : %s\nStatut : %s\nPriorite : %s\nNotes internes : %s\n\n",
               r[i].id, u[r[i].user_index].name, ctime(&r[i].date), r[i].motif, r[i].description, r[i].categorie, r[i].status, r[i].priority, r[i].internal_notes);
    }
}

void modify_reclamation(reclamation r[], int index) {
    printf("Modifier le motif (actuel : %s) : ", r[index].motif);
    scanf(" %[^\n]", r[index].motif);
    printf("Modifier la description (actuelle : %s) : ", r[index].description);
    scanf(" %[^\n]", r[index].description);
    printf("Modifier la categorie (actuelle : %s) : ", r[index].categorie);
    scanf(" %[^\n]", r[index].categorie);

    if (strstr(r[index].description, "urgent") || strstr(r[index].description, "crash")) {
        strcpy(r[index].priority, "Haute");
    } else if (strstr(r[index].description, "feature") || strstr(r[index].description, "improvement")) {
        strcpy(r[index].priority, "Moyenne");
    } else {
        strcpy(r[index].priority, "Basse");
    }

    printf("Reclamation modifiee avec succes.\n");
}

void delete_reclamation(reclamation r[], int index) {
    for (int i = index; i < reclamation_count - 1; i++) {
        r[i] = r[i + 1];
    }
    reclamation_count--;
    printf("Reclamation supprimee avec succes.\n");
}

void assign_agent_role(user u[], int index) {
    strcpy(u[index].role, "agent");
    printf("%s a ete promu agent de reclamation.\n", u[index].name);
}

void sign_up_user(user u[]) {
    int valide = 0;
    int att = 0;

    printf("Bonjour !\n");

    while (!valide) {
        printf("Entrez votre nom : ");
        scanf(" %[^\n]", u[user_count].name);
        if (strlen(u[user_count].name) < 3) {
            printf("Le nom doit comporter au moins 3 caracteres.\n");
            continue;
        }
        valide = 1;
        for (int i = 0; i < strlen(u[user_count].name); i++) {
            if (isdigit(u[user_count].name[i])) {
                valide = 0;
                printf("Entrez un nom valide (pas de chiffres autorises).\n");
                break;
            }
        }
    }

    valide = 0;

    while (!valide && att < 3) {
        printf("Entrez votre mot de passe : ");
        scanf(" %[^\n]", u[user_count].mot_pass);

        int longer = strlen(u[user_count].mot_pass);
        int name_used = (strstr(u[user_count].mot_pass, u[user_count].name) != NULL);
        int digi = 0, alpha = 0, up = 0, low = 0, spc = 0;

        for (int i = 0; i < longer; i++) {
            if (isdigit(u[user_count].mot_pass[i])) digi = 1;
            if (isalpha(u[user_count].mot_pass[i])) alpha = 1;
            if (islower(u[user_count].mot_pass[i])) low = 1;
            if (isupper(u[user_count].mot_pass[i])) up = 1;
            if (strchr("!@#$%^&*.,", u[user_count].mot_pass[i])) spc = 1;
        }

        if (digi && alpha && spc && up && low && longer >= 8 && !name_used) {
            valide = 1;
        } else {
            printf("Entrez un mot de passe valide.\n");
            att++;
            if (att > 2) {
                printf("Vous avez atteint le nombre maximal d'essais. Attendez 10 secondes avant d'essayer a nouveau.\n");
                sleep(10);
                return;
            }
        }
    }

    strcpy(u[user_count].role, "client");
    printf("Inscription reussie. Votre nom d'utilisateur est %s et votre mot de passe est %s.\n", u[user_count].name, u[user_count].mot_pass);
    user_count++;
}

void sign_in_user(user u[], reclamation r[]) {
    char name[30];
    char pass[30];
    int exist = 0;
    int attempts = 0;

    if (user_count == 0) {
        printf("Veuillez vous inscrire d'abord.\n");
        return;
    }

    while (attempts < 3 && !exist) {
        printf("Entrez votre nom d'utilisateur : ");
        scanf(" %[^\n]", name);
        printf("Entrez votre mot de passe : ");
        scanf(" %[^\n]", pass);

        for (int i = 0; i < user_count; i++) {
            if (strcmp(u[i].name, name) == 0 && strcmp(u[i].mot_pass, pass) == 0) {
                printf("Bonjour, %s !\n", u[i].name);
                exist = 1;
                int choice;
                while (1) {
                    printf("1 - Afficher toutes les reclamations\n2 - Modifier une reclamation\n3 - Supprimer une reclamation\n4 - add afichag\n5 -Quitter\n");
                    scanf("%d", &choice);
                    if (choice == 1) {
                        display_reclamations(r, u, u[i].role);
                    } else if (choice == 2) {
                        int id;
                        printf("Entrez l'ID de la reclamation : ");
                        scanf("%d", &id);
                        for (int j = 0; j < reclamation_count; j++) {
                            if (r[j].id == id && r[j].user_index == i) {
                                modify_reclamation(r, j);
                                break;
                            } else {
                                printf("Reclamation non trouvee ou vous n'avez pas l'autorisation de la modifier.\n");
                            }
                        }
                    } else if (choice == 3) {
                        int id;
                        printf("Entrez l'ID de la reclamation : ");
                        scanf("%d", &id);
                        for (int j = 0; j < reclamation_count; j++) {
                            if (r[j].id == id && r[j].user_index == i) {
                                delete_reclamation(r, j);
                                break;
                            } else {
                                printf("Reclamation non trouvee ou vous n'avez pas l'autorisation de la supprimer.\n");
                            }
                        }
                    }else if (choice == 4){
                        printf("Comment puis-je vous aider aujourd'hui ?\n");
                          enter_rec(r, u, i);

                }  else if (choice == 5) {
                        printf("Déconnexion...\n");
                        return;
                    } else {
                        printf("Choix invalide. Réessayez.\n");
                    }
                }
            }
        }

        if (!exist) {
            printf("Nom d'utilisateur ou mot de passe incorrect. Réessayez.\n");
            attempts++;
            if (attempts >= 3) {
                printf("Vous avez atteint le nombre maximal d'essais. Veuillez attendre 10 secondes.\n");
                sleep(10);
            }
        }
    }
}

void sign_in_admin(user u[], reclamation r[]) {
    char name[30], pass[30];
    int attempts = 0;

    while (attempts < 3) {
        printf("Nom d'administrateur : ");
        scanf(" %[^\n]", name);
        printf("Mot de passe : ");
        scanf(" %[^\n]", pass);

        if (strcmp(u[0].name, name) == 0 && strcmp(u[0].mot_pass, pass) == 0) {
            printf("Bonjour, Administrateur !\n");
            int choice;
            while (1) {
                printf("1 - Afficher toutes les reclamations\n2 - Modifier une reclamation\n3 - Supprimer une reclamation\n4 - Rechercher par ID\n5 - Rechercher par nom\n6 - Rechercher par statut\n7 - Assigner un agent\n8 - Marquer la reclamation\n9 - Quitter\n");
                scanf("%d", &choice);
                if (choice == 1) {
                    display_reclamations(r, u, "admin");
                } else if (choice == 2) {
                    int id;
                    printf("Entrez l'ID de la reclamation : ");
                    scanf("%d", &id);
                    for (int j = 0; j < reclamation_count; j++) {
                        if (r[j].id == id) {
                            modify_reclamation(r, j);
                            break;
                        }
                    }
                } else if (choice == 3) {
                    int id;
                    printf("Entrez l'ID de la reclamation : ");
                    scanf("%d", &id);
                    for (int j = 0; j < reclamation_count; j++) {
                        if (r[j].id == id) {
                            delete_reclamation(r, j);
                            break;
                        }
                    }
                } else if (choice == 4) {
                    int id;
                    printf("Entrez l'ID de la reclamation : ");
                    scanf("%d", &id);
                    for (int j = 0; j < reclamation_count; j++) {
                        if (r[j].id == id) {
                            printf("Reclamation trouvee : ID %d, Motif: %s, Description: %s, Statut: %s\n",
                                   r[j].id, r[j].motif, r[j].description, r[j].status);
                            break;
                        }
                    }
                } else if (choice == 5) {
                    char client_name[30];
                    printf("Entrez le nom du client : ");
                    scanf(" %[^\n]", client_name);
                    for (int j = 0; j < reclamation_count; j++) {
                        if (strcmp(u[r[j].user_index].name, client_name) == 0) {
                            printf("Reclamation trouvee : ID %d, Motif: %s, Description: %s, Statut: %s\n",
                                   r[j].id, r[j].motif, r[j].description, r[j].status);
                        }
                    }
                } else if (choice == 6) {
    char status[30];
    printf("Entrez le statut (en attente, en cours, resolue, fermee) : ");
    scanf(" %[^\n]", status);
    int found = 0;  // Variable pour vérifier si des réclamations ont été trouvées

    for (int j = 0; j < reclamation_count; j++) {
        if (strcmp(r[j].status, status) == 0) {
            printf("Reclamation trouvee : ID %d, Motif: %s, Description: %s, Statut: %s\n",
                   r[j].id, r[j].motif, r[j].description, r[j].status);
            found = 1;  // Indiquer qu'une réclamation a été trouvée
        }
    }

    if (!found) {
        printf("Aucune reclamation trouvee avec le statut \"%s\".\n", status);
    }
}
 else if (choice == 7) {
                    char client_name[30];
                    printf("Entrez le nom du client : ");
                    scanf(" %[^\n]", client_name);
                    for (int j = 0; j < user_count; j++) {
                        if (strcmp(u[j].name, client_name) == 0) {
                            assign_agent_role(u, j);
                            break;
                        }
                    }
                }else if (choice == 8) {
                        char status[30];
                        printf("Entrez le statut (en attente, en cours, resolue, fermee) : ");
                        scanf(" %[^\n]", status);
                        int found = 0;  // Variable pour vérifier si des réclamations ont été trouvées
                        for (int j = 0; j < reclamation_count; j++) {
                            if (strcmp(r[j].status, status) == 0) {
                                printf("Reclamation trouvee : ID %d, Motif: %s, Description: %s, Statut: %s\n",
                                       r[j].id, r[j].motif, r[j].description, r[j].status);
                                found = 1;
                            }
                        }
                        if (!found) {
                            printf("Aucune reclamation trouvee avec le statut \"%s\".\n", status);
                        }
                    } else if (choice == 9) {
                    return;
                } else {
                    printf("Choix invalide.\n");
                }
            }
        } else {
            attempts++;
        }
    }
    printf("Identifiants incorrects.\n");
}

void mark_reclamation(reclamation *rec) {
    char status[30];
    printf("Marquer la reclamation comme (en cours, resolue, fermee) : ");
    scanf(" %[^\n]", status);
    strcpy(rec->status, status);

    char notes[250];
    printf("Ajouter des notes internes : ");
    scanf(" %[^\n]", notes);
    strcpy(rec->internal_notes, notes);

    printf("Reclamation marquee avec succes.\n");
}

void sign_in_agent(user u[], reclamation r[]) {
    char name[30], pass[30];
    int attempts = 0;

    while (attempts < 3) {
        printf("Nom d'agent : ");
        scanf(" %[^\n]", name);
        printf("Mot de passe : ");
        scanf(" %[^\n]", pass);

        for (int i = 0; i < user_count; i++) {
            if (strcmp(u[i].name, name) == 0 && strcmp(u[i].mot_pass, pass) == 0 && strcmp(u[i].role, "agent") == 0) {
                printf("Bonjour, Agent de Reclamation !\n");
                int choice;
                while (1) {
                    printf("1 - Afficher toutes les reclamations\n2 - Modifier une reclamation\n3 - Supprimer une reclamation\n4 - Rechercher par ID\n5 - Marquer la reclamation\n6 - Rechercher par nom du client\n7 - Rechercher par statut\n8 - Quitter\n");
                    scanf("%d", &choice);
                    if (choice == 1) {
                        display_reclamations(r, u, "agent");
                    } else if (choice == 2) {
                        int id;
                        printf("Entrez l'ID de la reclamation : ");
                        scanf("%d", &id);
                        for (int j = 0; j < reclamation_count; j++) {
                            if (r[j].id == id) {
                                modify_reclamation(r, j);
                                break;
                            }
                        }
                    } else if (choice == 3) {
                        int id;
                        printf("Entrez l'ID de la reclamation : ");
                        scanf("%d", &id);
                        for (int j = 0; j < reclamation_count; j++) {
                            if (r[j].id == id) {
                                delete_reclamation(r, j);
                                break;
                            }
                        }
                    } else if (choice == 4) {
                        int id;
                        printf("Entrez l'ID de la reclamation : ");
                        scanf("%d", &id);
                        for (int j = 0; j < reclamation_count; j++) {
                            if (r[j].id == id) {
                                printf("Reclamation trouvee : ID %d, Motif: %s, Description: %s, Statut: %s\n",
                                       r[j].id, r[j].motif, r[j].description, r[j].status);
                                break;
                            }
                        }
                    } else if (choice == 5) {
                        int id;
                        printf("Entrez l'ID de la reclamation : ");
                        scanf("%d", &id);
                        for (int j = 0; j < reclamation_count; j++) {
                            if (r[j].id == id) {
                                mark_reclamation(&r[j]);
                                break;
                            }
                        }
                    } else if (choice == 6) {
                        char client_name[30];
                        printf("Entrez le nom du client : ");
                        scanf(" %[^\n]", client_name);
                        int found = 0;  // Variable pour vérifier si des réclamations ont été trouvées
                        for (int j = 0; j < reclamation_count; j++) {
                            if (strcmp(u[r[j].user_index].name, client_name) == 0) {
                                printf("Reclamation trouvee : ID %d, Motif: %s, Description: %s, Statut: %s\n",
                                       r[j].id, r[j].motif, r[j].description, r[j].status);
                                found = 1;
                            }
                        }
                        if (!found) {
                            printf("Aucune reclamation trouvee pour le client \"%s\".\n", client_name);
                        }
                    } else if (choice == 7) {
                        char status[30];
                        printf("Entrez le statut (en attente, en cours, resolue, fermee) : ");
                        scanf(" %[^\n]", status);
                        int found = 0;  // Variable pour vérifier si des réclamations ont été trouvées
                        for (int j = 0; j < reclamation_count; j++) {
                            if (strcmp(r[j].status, status) == 0) {
                                printf("Reclamation trouvee : ID %d, Motif: %s, Description: %s, Statut: %s\n",
                                       r[j].id, r[j].motif, r[j].description, r[j].status);
                                found = 1;
                            }
                        }
                        if (!found) {
                            printf("Aucune reclamation trouvee avec le statut \"%s\".\n", status);
                        }
                    } else if (choice == 8) {
                        return;
                    } else {
                        printf("Choix invalide.\n");
                    }
                }
            }
        }
        attempts++;
    }
    printf("Identifiants incorrects.\n");
}

int main() {
    user u[MAX_USERS];
    reclamation r[MAX_RECLAMATIONS];
    srand(time(0));

    strcpy(u[user_count].name, "admin");
    strcpy(u[user_count].mot_pass, "admin");
    strcpy(u[user_count].role, "admin");
    user_count++;

    while (1) {
        int choice;
        printf("1 - Inscription\n2 - Connexion Client\n3 - Connexion Administrateur\n4 - Connexion Agent de Reclamation\n5 - Quitter\nEntrez votre choix : ");
        scanf("%d", &choice);
        if (choice == 1) {
            sign_up_user(u);
        } else if (choice == 2) {
            sign_in_user(u, r);
        } else if (choice == 3) {
            sign_in_admin(u, r);
        } else if (choice == 4) {
            sign_in_agent(u, r);
        } else if (choice == 5) {
            return 0;
        } else {
            printf("Choix invalide.\n");
        }
    }

    return 0;
}
