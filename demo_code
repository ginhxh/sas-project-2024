#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#define MAX_USERS 200
#define MAX_RECLAMATIONS 200

typedef struct {
    char name[30];
    char mot_pass[40];
    char role[20];
} user;

typedef struct {
    int id;
    char motif[40];
    char description[250];
    char categorie[30];
    char status[30];
    char priority[30];
    char client[40];
    int user_index;
} reclamation;

int user_count = 0;
int reclamation_count = 0;
char basse[5][20] = {"bugs", "glitch", "slow", "minor", "fix"};
    char moyenne[5][20] = {"feature", "improvement", "question", "update", "request"};
    char haute[5][20] = {"crash", "urgent", "data loss", "security", "downtime"};

void enter_rec(reclamation r[], user u[], int user_index) {
    int pp1 = 0, pp2 = 0, pp3 = 0;

    if (reclamation_count >= MAX_RECLAMATIONS) {
        printf("Limite de reclamation atteinte.\n");
        return;
    }

    r[reclamation_count].user_index = user_index;
    printf("Bonjour, quel est le motif de votre reclamation : ");
    scanf(" %[^\n]", r[reclamation_count].motif);
    printf("Entrez une description : ");
    scanf(" %[^\n]", r[reclamation_count].description);
    printf("Dans quelle categorie se trouve votre probleme : ");
    scanf(" %[^\n]", r[reclamation_count].categorie);

    for (int i = 0; i < 5; i++) {
        if (strstr(r[reclamation_count].description, basse[i]) != NULL) {
            pp1 = 1;
        }
        if (strstr(r[reclamation_count].description, moyenne[i]) != NULL) {
            pp2 = 1;
        }
        if (strstr(r[reclamation_count].description, haute[i]) != NULL) {
            pp3 = 1;
        }
    }

    if (pp3) {
        strcpy(r[reclamation_count].priority, "Haute");
    } else if (pp2) {
        strcpy(r[reclamation_count].priority, "Moyenne");
    } else if (pp1) {
        strcpy(r[reclamation_count].priority, "Basse");
    } else {
        strcpy(r[reclamation_count].priority, "Non specifiee");
    }

    srand(time(0));
    r[reclamation_count].id = rand() % 1000;

    printf("Votre reclamation a ete enregistree avec ID: %d\n", r[reclamation_count].id);
    printf("Priorite attribuee: %s\n", r[reclamation_count].priority);

    reclamation_count++;
}


void display_reclamations(reclamation r[], user u[]) {
    if (reclamation_count == 0) {
        printf("Aucune reclamation a afficher.\n");
        return;
    }

    for (int i = 0; i < reclamation_count; i++) {
        printf("ID : %d\n", r[i].id);
        printf("Client : %s\n", u[r[i].user_index].name);
        printf("Motif : %s\n", r[i].motif);
        printf("Description : %s\n", r[i].description);
        printf("Categorie : %s\n", r[i].categorie);
        printf("Priorite : %s\n", r[i].priority);
        printf("\n");
    }
}

void search_by_client(reclamation r[], user u[], char client_name[30]) {
    int found = 0;
    for (int i = 0; i < reclamation_count; i++) {
        if (strcmp(u[r[i].user_index].name, client_name) == 0) {
            printf("Reclamation trouvee : ID %d, Motif: %s\n", r[i].id, r[i].motif);
            found = 1;
        }
    }
    if (!found) {
        printf("Aucune reclamation trouvee pour le client %s.\n", client_name);
    }
}


void sign_up_user(user u[]) {
    if (user_count >= MAX_USERS) {
        printf("Limite d'inscription atteinte.\n");
        return;
    }
    printf("Entrez votre nom d'utilisateur : ");
    scanf(" %[^\n]", u[user_count].name);
    printf("Entrez votre mot de passe : ");
    scanf(" %[^\n]", u[user_count].mot_pass);
    strcpy(u[user_count].role, "client");
    user_count++;
    printf("Inscription reussie!\n");
}

void sign_in_user(user u[], reclamation r[]) {
    char name[30], pass[30];
    int exist = 0;
    int attempts = 0;

    if (user_count == 0) {
        printf("Enregistrez-vous d'abord.\n");
        return;
    }

    while (attempts < 3 && !exist) {
        printf("Entrez votre nom d'utilisateur : ");
        scanf(" %[^\n]", name);
        printf("Entrez votre mot de passe : ");
        scanf(" %[^\n]", pass);

        for (int i = 0; i < user_count; i++) {
            if (strcmp(u[i].name, name) == 0 && strcmp(u[i].mot_pass, pass) == 0) {
                exist = 1;
                printf("Bienvenue %s ! Comment puis-je vous aider aujourd'hui ?\n", u[i].name);
                int choice;
                while (1) {
                    printf("1 - Ajouter une reclamation\n2 - Afficher vos reclamations\n3 - Quitter\n");
                    scanf("%d", &choice);
                    switch (choice) {
                        case 1:
                            enter_rec(r, u, i); // Pass user index
                            break;
                        case 2:
                            search_by_client(r, u, u[i].name);
                            break;
                        case 3:
                            return;
                        default:
                            printf("Choix invalide. Essayez encore.\n");
                    }
                }
                break;
            }
        }
        attempts++;
        if (attempts == 3) {
            sleep(10);
            return;
        }
    }

    if (!exist) {
        printf("Connexion echouee.\n");
    }
}

void sign_in_admin(user u[], reclamation r[]) {
    char admin_name[30] = "admin";
    char admin_password[30] = "admin";
    char name[30], pass[30];
    int attempts = 0;

    while (attempts < 3) {
        printf("Entrez votre nom d'administrateur : ");
        scanf(" %[^\n]", name);
        printf("Entrez votre mot de passe : ");
        scanf(" %[^\n]", pass);

        if (strcmp(name, admin_name) == 0 && strcmp(pass, admin_password) == 0) {
            printf("Bonjour, Administrateur !\n");
            int choice;
            while (1) {
                printf("1 - Afficher toutes les reclamations\n2 - Ajouter une reclamation\n3 - Rechercher par nom\n4 - Quitter\n");
                scanf("%d", &choice);

                switch (choice) {
                    case 1:
                        display_reclamations(r, u);
                        break;
                    case 2:
                        enter_rec(r, u, -1);
                        break;
                    case 3: {
                        char client_name[30];
                        printf("Entrez le nom du client : ");
                        scanf(" %[^\n]", client_name);
                        search_by_client(r, u, client_name);
                        break;
                    }
                    case 4:
                        return;
                    default:
                        printf("Choix invalide.\n");
                }
            }
        } else {
            printf("Identifiants incorrects. Reessayez.\n");
            attempts++;
            if (attempts == 3) {
                printf("Trop de tentatives echouees. Attendez 10 secondes avant de reessayer.\n");
                sleep(10);
            }
        }
    }
}

void sign_in_manager(user u[], reclamation r[]) {
    char manager_name[30] = "manager";
    char manager_password[30] = "manager";
    char name[30], pass[30];
    int attempts = 0;

    while (attempts < 3) {
        printf("Entrez votre nom de manager : ");
        scanf(" %[^\n]", name);
        printf("Entrez votre mot de passe : ");
        scanf(" %[^\n]", pass);

        if (strcmp(name, manager_name) == 0 && strcmp(pass, manager_password) == 0) {
            printf("Bonjour, Manager !\n");
            int choice;
            while (1) {
                printf("1 - Afficher toutes les reclamations\n2 - Quitter\n");
                scanf("%d", &choice);

                switch (choice) {
                    case 1:
                        display_reclamations(r, u);
                        break;
                    case 2:
                        return;
                    default:
                        printf("Choix invalide.\n");
                }
            }
        } else {
            printf("Identifiants incorrects. Reessayez.\n");
            attempts++;
            if (attempts == 3) {
                printf("Trop de tentatives echouees. Attendez 10 secondes avant de reessayer.\n");
                sleep(10);
            }
        }
    }
}

int main() {
    user u[MAX_USERS];
    reclamation r[MAX_RECLAMATIONS];

    srand(time(0));

    int choice;

    while (1) {
        printf("1 - Inscription\n2 - Connexion Client\n3 - Connexion Administrateur\n4 - Connexion Manager\n5 - Quitter\nEntrez votre choix : ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                sign_up_user(u);
                break;
            case 2:
                sign_in_user(u, r);
                break;
            case 3:
                sign_in_admin(u, r);
                break;
            case 4:
                sign_in_manager(u, r);
                break;
            case 5:
                return 0;
            default:
                printf("Choix invalide.\n");
                break;
        }
    }

    return 0;
}
